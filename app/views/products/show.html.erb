<div class="productDetails">
    <div class="productDetailsContainer">
        <img src="<%= @product.image%>"/>
        <p class="productDetailName"><%= @product.name%></p>
    </div>

    <div class="productDistributors">

        <% @productSource.each do |productSource| %>
            <div class="distributer">
                <a href="" class="distributerDetails">
                    <div class="details">
                        <img src="<%= productSource.image%>"/>
                        <p><%= productSource.name%></p>
                    </div>
                    <div class="price">
                        <p><%= productSource.price%></p>
                    </div>
                </a>
            </div>
        
        <% end %>
        
        
    </div>
</div>
    <script src="https://d3js.org/d3.v7.min.js"></script>

<div class="grahpContainer">
    <h1>
        Price Change
    </h1>
    <div class="graph"></div>
</div>

<script>
    class ReformatData {
        constructor(arrays) {
            this.dataset=[]

            this.dataset.push({ date: this.getDayOfWeek('2024-02-13'), average: 1212.51 })
            this.dataset.push({ date: this.getDayOfWeek('2024-02-14'), average: 1153.25 })
            this.groupedArrays = this.groupArraysByDate(arrays);

            for (let date in this.groupedArrays) {
                let average = this.calculateAverage(this.groupedArrays[date]); 

                this.dataset.push({
                    date:this.getDayOfWeek(date),
                    average: average
                })
            }
        }

        getDayOfWeek(date) {
            const dayOfWeek = new Date(date).getDay();    
            return isNaN(dayOfWeek) ? null : 
                ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][dayOfWeek];
            }

        groupArraysByDate(arrays) {
            let groupedArrays = {};
            arrays.forEach(array => {
                let date = array[array.length - 1];
                if (!groupedArrays[date]) {
                    groupedArrays[date] = [];
                }
                groupedArrays[date].push(array);
            });
            return groupedArrays;
        }

        calculateAverage(arrays) {
            let sum = 0;
            arrays.forEach(array => {
                let value = parseFloat(array[1].replace(/[^\d.,]/g, '').replace(',', '.')); // Extract numeric value from the second element
                if (!isNaN(value)) {
                    sum += value;
                }
            });
            return sum / arrays.length;
        }
    }

    class RenderGraph {
        constructor(data) {
            this.data = data;
            this.container = this.setUpContainer();
            this.setUpScales();
            this.line = this.defineLine();
            this.drawLine();
        }

        setUpContainer() {
            return d3.select('.graph');
        }

        setUpScales() {
            this.x = d3.scaleBand()
                .domain(this.data.map(d => d.date))
                .range([0, this.container.node().offsetWidth]);

            this.y = d3.scaleLinear()
                .domain([0, d3.max(this.data, d => d.average)])
                .nice()
                .range([this.container.node().offsetHeight, 0]);
        }

        defineLine() {
            return d3.line()
                .x(d => this.x(d.date))
                .y(d => this.y(d.average));
        }

        drawLine() {
            this.container.append('svg')
                .attr('width', this.container.node().offsetWidth)
                .attr('height', this.container.node().offsetHeight)
                .append('path')
                .datum(this.data)
                .attr('class', 'line')
                .attr('d', this.line);
        }

        drawXAxis() {
            this.container.append('g')
                .attr('class', 'x-axis')
                .call(d3.axisBottom(this.x));
        }

        drawYAxis() {
            this.container.append('g')
                .attr('class', 'y-axis')
                .call(d3.axisLeft(this.y));
        }
    }

    let dataset = new ReformatData(<%= raw @priceRecords.to_json %>)
    console.log(dataset.dataset)

    let graph = new RenderGraph(dataset.dataset);

</script>

